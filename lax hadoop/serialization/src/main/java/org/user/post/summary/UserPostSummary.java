/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.user.post.summary;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class UserPostSummary extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserPostSummary\",\"namespace\":\"org.user.post.summary\",\"fields\":[{\"name\":\"user_id\",\"type\":\"string\"},{\"name\":\"user_city\",\"type\":\"string\"},{\"name\":\"total_posts\",\"type\":\"int\"},{\"name\":\"posts\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"UserPost\",\"fields\":[{\"name\":\"post_date\",\"type\":\"string\"},{\"name\":\"post_count\",\"type\":\"int\"}]}},\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence user_id;
  @Deprecated public java.lang.CharSequence user_city;
  @Deprecated public int total_posts;
  @Deprecated public java.util.List<org.user.post.summary.UserPost> posts;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public UserPostSummary() {}

  /**
   * All-args constructor.
   */
  public UserPostSummary(java.lang.CharSequence user_id, java.lang.CharSequence user_city, java.lang.Integer total_posts, java.util.List<org.user.post.summary.UserPost> posts) {
    this.user_id = user_id;
    this.user_city = user_city;
    this.total_posts = total_posts;
    this.posts = posts;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return user_id;
    case 1: return user_city;
    case 2: return total_posts;
    case 3: return posts;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: user_id = (java.lang.CharSequence)value$; break;
    case 1: user_city = (java.lang.CharSequence)value$; break;
    case 2: total_posts = (java.lang.Integer)value$; break;
    case 3: posts = (java.util.List<org.user.post.summary.UserPost>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'user_id' field.
   */
  public java.lang.CharSequence getUserId() {
    return user_id;
  }

  /**
   * Sets the value of the 'user_id' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.CharSequence value) {
    this.user_id = value;
  }

  /**
   * Gets the value of the 'user_city' field.
   */
  public java.lang.CharSequence getUserCity() {
    return user_city;
  }

  /**
   * Sets the value of the 'user_city' field.
   * @param value the value to set.
   */
  public void setUserCity(java.lang.CharSequence value) {
    this.user_city = value;
  }

  /**
   * Gets the value of the 'total_posts' field.
   */
  public java.lang.Integer getTotalPosts() {
    return total_posts;
  }

  /**
   * Sets the value of the 'total_posts' field.
   * @param value the value to set.
   */
  public void setTotalPosts(java.lang.Integer value) {
    this.total_posts = value;
  }

  /**
   * Gets the value of the 'posts' field.
   */
  public java.util.List<org.user.post.summary.UserPost> getPosts() {
    return posts;
  }

  /**
   * Sets the value of the 'posts' field.
   * @param value the value to set.
   */
  public void setPosts(java.util.List<org.user.post.summary.UserPost> value) {
    this.posts = value;
  }

  /** Creates a new UserPostSummary RecordBuilder */
  public static org.user.post.summary.UserPostSummary.Builder newBuilder() {
    return new org.user.post.summary.UserPostSummary.Builder();
  }
  
  /** Creates a new UserPostSummary RecordBuilder by copying an existing Builder */
  public static org.user.post.summary.UserPostSummary.Builder newBuilder(org.user.post.summary.UserPostSummary.Builder other) {
    return new org.user.post.summary.UserPostSummary.Builder(other);
  }
  
  /** Creates a new UserPostSummary RecordBuilder by copying an existing UserPostSummary instance */
  public static org.user.post.summary.UserPostSummary.Builder newBuilder(org.user.post.summary.UserPostSummary other) {
    return new org.user.post.summary.UserPostSummary.Builder(other);
  }
  
  /**
   * RecordBuilder for UserPostSummary instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserPostSummary>
    implements org.apache.avro.data.RecordBuilder<UserPostSummary> {

    private java.lang.CharSequence user_id;
    private java.lang.CharSequence user_city;
    private int total_posts;
    private java.util.List<org.user.post.summary.UserPost> posts;

    /** Creates a new Builder */
    private Builder() {
      super(org.user.post.summary.UserPostSummary.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.user.post.summary.UserPostSummary.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.user_id)) {
        this.user_id = data().deepCopy(fields()[0].schema(), other.user_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.user_city)) {
        this.user_city = data().deepCopy(fields()[1].schema(), other.user_city);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.total_posts)) {
        this.total_posts = data().deepCopy(fields()[2].schema(), other.total_posts);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.posts)) {
        this.posts = data().deepCopy(fields()[3].schema(), other.posts);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing UserPostSummary instance */
    private Builder(org.user.post.summary.UserPostSummary other) {
            super(org.user.post.summary.UserPostSummary.SCHEMA$);
      if (isValidValue(fields()[0], other.user_id)) {
        this.user_id = data().deepCopy(fields()[0].schema(), other.user_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.user_city)) {
        this.user_city = data().deepCopy(fields()[1].schema(), other.user_city);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.total_posts)) {
        this.total_posts = data().deepCopy(fields()[2].schema(), other.total_posts);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.posts)) {
        this.posts = data().deepCopy(fields()[3].schema(), other.posts);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'user_id' field */
    public java.lang.CharSequence getUserId() {
      return user_id;
    }
    
    /** Sets the value of the 'user_id' field */
    public org.user.post.summary.UserPostSummary.Builder setUserId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.user_id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'user_id' field has been set */
    public boolean hasUserId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'user_id' field */
    public org.user.post.summary.UserPostSummary.Builder clearUserId() {
      user_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'user_city' field */
    public java.lang.CharSequence getUserCity() {
      return user_city;
    }
    
    /** Sets the value of the 'user_city' field */
    public org.user.post.summary.UserPostSummary.Builder setUserCity(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.user_city = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'user_city' field has been set */
    public boolean hasUserCity() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'user_city' field */
    public org.user.post.summary.UserPostSummary.Builder clearUserCity() {
      user_city = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'total_posts' field */
    public java.lang.Integer getTotalPosts() {
      return total_posts;
    }
    
    /** Sets the value of the 'total_posts' field */
    public org.user.post.summary.UserPostSummary.Builder setTotalPosts(int value) {
      validate(fields()[2], value);
      this.total_posts = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'total_posts' field has been set */
    public boolean hasTotalPosts() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'total_posts' field */
    public org.user.post.summary.UserPostSummary.Builder clearTotalPosts() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'posts' field */
    public java.util.List<org.user.post.summary.UserPost> getPosts() {
      return posts;
    }
    
    /** Sets the value of the 'posts' field */
    public org.user.post.summary.UserPostSummary.Builder setPosts(java.util.List<org.user.post.summary.UserPost> value) {
      validate(fields()[3], value);
      this.posts = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'posts' field has been set */
    public boolean hasPosts() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'posts' field */
    public org.user.post.summary.UserPostSummary.Builder clearPosts() {
      posts = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public UserPostSummary build() {
      try {
        UserPostSummary record = new UserPostSummary();
        record.user_id = fieldSetFlags()[0] ? this.user_id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.user_city = fieldSetFlags()[1] ? this.user_city : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.total_posts = fieldSetFlags()[2] ? this.total_posts : (java.lang.Integer) defaultValue(fields()[2]);
        record.posts = fieldSetFlags()[3] ? this.posts : (java.util.List<org.user.post.summary.UserPost>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
